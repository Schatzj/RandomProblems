/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graphs;

import java.util.List;

public class Library {
	public static void main (String[] args) {
		
		DFSAdjacencyList<SimpleNode> graph = new DFSAdjacencyList<SimpleNode>(2);
		
		graph.addEdge(0, new SimpleNode(0));
		graph.addEdge(0, new SimpleNode(1));
        graph.addEdge(0, new SimpleNode(2));
        
        graph.addEdge(1, new SimpleNode(1));
        graph.addEdge(1, new SimpleNode(2));
        
        graph.addEdge(2, new SimpleNode(2));
        graph.addEdge(2, new SimpleNode(0));
        graph.addEdge(2, new SimpleNode(3));
        
        graph.addEdge(3, new SimpleNode(3));
        
        List<SimpleNode> result = graph.search(0);
        for(SimpleNode node : result) {
        	System.out.println(node.getValue());
        }
        
        System.out.println("");
        
        DFSAdjacencyListSimple graphSimple = new DFSAdjacencyListSimple(4);
		
        graphSimple.addEdge(0, 1);
        graphSimple.addEdge(0, 2);
        
        graphSimple.addEdge(1, 2);
        
        graphSimple.addEdge(2, 0);
        graphSimple.addEdge(2, 3);
        
        graphSimple.addEdge(3, 3);
        
        List<Integer> searchResult = graphSimple.search(0);
        for(Integer node : searchResult) {
        	System.out.println(node);
        }
        
        System.out.println("");
        
        DFSAdjacencyMatrix matrix = new DFSAdjacencyMatrix(5);
        
        matrix.addEdge(0, 1);
        matrix.addEdge(0, 2);
        matrix.addEdge(0, 4);
        
        matrix.addEdge(1, 3);
        
        matrix.addEdge(2, 2);
        matrix.addEdge(2, 4);
        
        List<Integer> search = matrix.search(0);
        for(Integer s : search) {
        	System.out.println(s);
        }
        
        System.out.println("");
        
        BFSAdjacencyListSimple bfs = new BFSAdjacencyListSimple(5);
		
        bfs.addEdge(0, 1);
        bfs.addEdge(0, 2);
        bfs.addEdge(0, 4);
        
        bfs.addEdge(1, 3);
        
        bfs.addEdge(2, 2);
        bfs.addEdge(2, 4);
        
        List<Integer> data = bfs.search(0);
        for(Integer node : data) {
        	System.out.println(node);
        }
	}
}
