/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package PalindromePermutation;

import java.util.HashMap;
import java.util.Set;

public class Library {
    public static boolean isAPermutationAPalindrome(String input) {
    	HashMap<Character, Integer> characters = new HashMap<Character, Integer>();
    	
    	//should regex the string to get clean input. To lazy at the moment. 
    	
    	char[] chars = input.toCharArray();
    	for(char c : chars) {
    		if(characters.containsKey(c)) {
    			characters.put(c, characters.get(c) + 1);
    		}else {
    			characters.put(c, 1);
    		}
    	}
    	
    	Set<Character> keys = characters.keySet();
    	boolean stringLengthIsEven = input.length() %2 == 0;
    	int noneEvenOccuranceOfKeys = 0;
    	
    	for(Character key : keys) {
    		Integer letterCount = characters.get(key);
    		if(letterCount % 2 != 0) {
    			if(stringLengthIsEven) {
        			return false;
    			}else {
    				noneEvenOccuranceOfKeys++;
        			if(noneEvenOccuranceOfKeys > 1) {
        				return false;
        			}
    			}
    		}
    	}
    	return true;
    }
    
    
    public static void main (String[] args) {
    	String one = "tacocat";
    	String two = "racecar";
    	String three = "jakota";
    	String four = "atacocat";
    	
    	System.out.println("String one: " + isAPermutationAPalindrome(one));
    	System.out.println("String two: " + isAPermutationAPalindrome(two));
    	System.out.println("String three: " + isAPermutationAPalindrome(three));
    	System.out.println("String four: " + isAPermutationAPalindrome(four));
    }
}
