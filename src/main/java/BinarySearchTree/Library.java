/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package BinarySearchTree;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import treeProblems.printDepths;

public class Library {
//    public boolean someLibraryMethod() {
//       
//    }
    
    public static void main (String[] args) throws IOException {
    	BSTree<Integer> root = new BSTree<Integer>(5);
    	root.insert(new BSTree<Integer>(15));
    	root.insert(new BSTree<Integer>(4));
    	root.insert(new BSTree<Integer>(12));
    	root.insert(new BSTree<Integer>(16));
    	root.insert(new BSTree<Integer>(18));
    	
    	System.out.println(root);
    	System.out.println(root.getRightNode().getLeftNode().getData());
    	
    	BSTree value = root.retrieve(15);
    	System.out.println(value.getData());
    	System.out.println(root);
    	System.out.println(root.getRightNode().getRightNode().getData());
    	value = root.retrieve(4);
    	System.out.println(value.getData());
    	System.out.println(root);
    	System.out.println(root.getRightNode().getRightNode().getData());
    	root.insert(new BSTree<Integer>(15));
    	root.insert(new BSTree<Integer>(22));
    	System.out.println(root);
    	System.out.println(root.getRightNode().getLeftNode().getData());
    	
    	
    	System.out.println("-------------------------------------------");
    	BSTWithParent<Integer> root2 = new BSTWithParent<Integer>(5);
    	root2.insert(new BSTWithParent<Integer>(15));
    	root2.insert(new BSTWithParent<Integer>(4));
    	root2.insert(new BSTWithParent<Integer>(12));
    	root2.insert(new BSTWithParent<Integer>(16));
    	root2.insert(new BSTWithParent<Integer>(18));
    	
    	System.out.println(root2.getDepth());
    	System.out.println(root2);
    	System.out.println(root2.getRightNode().getLeftNode().getData());
    	System.out.println(root2.getRightNode().getLeftNode().getParent().getData());
    	System.out.println(root2.getRightNode().getRightNode().getRightNode());
    	
    	root2.delete(15);
    	System.out.println("---------------------------------------------------");
    	System.out.println(root2);
    	System.out.println(root2.getRightNode().getRightNode());
    	System.out.println(root2.getRightNode().getLeftNode());
    	System.out.println(root2.getLeftNode());
    	
    }
}
